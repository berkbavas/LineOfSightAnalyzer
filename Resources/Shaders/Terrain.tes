#version 450 core

layout(quads, fractional_odd_spacing, ccw) in;

uniform sampler2D heightMap; // the texture corresponding to our height map
uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;
uniform float minElevation;
uniform float maxElevation;

in vec2 tes_TextureCoords[];

out vec2 fs_TextureCoords;
out vec3 fs_FragWorldPosition;
out vec3 gs_FragWorldPosition;

void main()
{
    // get patch coordinate
    float u = gl_TessCoord.x;
    float v = gl_TessCoord.y;

    // ----------------------------------------------------------------------
    // retrieve control point texture coordinates
    vec2 t00 = tes_TextureCoords[0];
    vec2 t01 = tes_TextureCoords[1];
    vec2 t10 = tes_TextureCoords[2];
    vec2 t11 = tes_TextureCoords[3];

    // bilinearly interpolate texture coordinate across patch
    vec2 t0 = (t01 - t00) * u + t00;
    vec2 t1 = (t11 - t10) * u + t10;
    vec2 texCoord = (t1 - t0) * v + t0;

    // lookup texel at patch coordinate for height and scale + shift as desired
    float height = minElevation + (maxElevation - minElevation) * texture(heightMap, texCoord).y;

    // ----------------------------------------------------------------------
    // retrieve control point position coordinates
    vec4 p00 = gl_in[0].gl_Position;
    vec4 p01 = gl_in[1].gl_Position;
    vec4 p10 = gl_in[2].gl_Position;
    vec4 p11 = gl_in[3].gl_Position;

    // bilinearly interpolate position coordinate across patch
    vec4 p0 = (p01 - p00) * u + p00;
    vec4 p1 = (p11 - p10) * u + p10;
    vec4 position = (p1 - p0) * v + p0;

    // displace point along normal
    position += vec4(0, height, 0, 1.0f);

    // write fs_FragWorldPosition in order to be able to query mouse world position
    fs_FragWorldPosition = position.xyz;

    // For observer pass
    gs_FragWorldPosition = position.xyz;

    // ----------------------------------------------------------------------
    // write fs_TextureCoords for shading
    fs_TextureCoords = texCoord;

    // output patch point position in clip space
    gl_Position = projection * view * model * position;
}
